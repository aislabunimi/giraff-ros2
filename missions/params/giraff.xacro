<?xml version="1.0"?>
<!--
 URDF MODEL of GIRAFF-X
 - Here we set Fixed and movable joints
 - To move the parts in RVIZ, publish sensor_msgs/JointState messages.
 - robot_state_publisher node calculates all of transforms between the different parts.
 - The resulting transform tree is then used to display all of the shapes in Rviz.
-->


<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="giraff">
<xacro:arg name="frame_ns" default="giraff"/>

  ### Define colors
  <material name="body_color">
    <color rgba="0.01 0.37 0.14 1"/>
  </material>
  <material name="blue">
    <color rgba="0.41 0.83 0.96 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
    <material name="grey">
    <color rgba="0.5 0.5 0.5 1"/>
  </material>
  <material name="red">
    <color rgba="0.9 0.0 0.0 1"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.9 0.0 1"/>
  </material>

  # Base footprint
  <link name="$(arg frame_ns)_base_footprint">
    <visual>
    <origin rpy="0 0 0" xyz="0 0 0"/>
     </visual>
  </link>


  # Base
  <link name="$(arg frame_ns)_base_link">
    <visual>
      <geometry>
        <cylinder length="0.20" radius="0.26"/>
      </geometry>
      <material name="body_color"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>              # Displacement/rotation of the part center with respect the reference_link (base_link)
    </visual>
  </link>

  <joint name="$(arg frame_ns)_base_footprint_to_base_link" type="fixed">
      <parent link="$(arg frame_ns)_base_footprint"/>
      <child link="$(arg frame_ns)_base_link"/>
      <origin rpy="0 0 0" xyz="0 0 0.10"/>             # Displacement/rotation of the reference_link with respect parent reference_link (TF)
  </joint>


  # Left wheel
  <link name="$(arg frame_ns)_left_wheel">
    <visual>
      <origin rpy="1.57075 0 0" xyz="0 0 0"/>           # Displacement/rotation of the part center with respect the reference_link
      <geometry>
        <cylinder length="0.02" radius="0.10"/>
      </geometry>
      <material name="black"/>
    </visual>
  </link>

  <joint name="$(arg frame_ns)_base_to_left_wheel_joint" type="fixed">
    <parent link="$(arg frame_ns)_base_link"/>
    <child link="$(arg frame_ns)_left_wheel"/>
    <origin rpy="0 0 0" xyz="0 0.24 0.10"/>             # Displacement/rotation of the reference_link with respect parent reference_link (TF)
  </joint>


  # Right wheel
  <link name="$(arg frame_ns)_right_wheel">
    <visual>
      <origin rpy="1.57075 0 0" xyz="0 0 0"/>           # Displacement/rotation of the part center with respect the reference_link
      <geometry>
        <cylinder length="0.02" radius="0.10"/>
      </geometry>
      <material name="black"/>
    </visual>
  </link>

  <joint name="$(arg frame_ns)_base_to_right_wheel_joint" type="fixed">
    <parent link="$(arg frame_ns)_base_link"/>
    <child link="$(arg frame_ns)_right_wheel"/>
    <origin rpy="0 0 0" xyz="0 -0.24 0.10"/>            # Displacement/rotation of the reference_link with respect parent reference_link (TF)
  </joint>





  # Hokuyo front
  <link name="$(arg frame_ns)_laser_link">
    <visual>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="black"/>
      <origin rpy="0 0 0" xyz="0 0.0 -0.03"/>     # Displacement/Rotation of the center with respect laser_link
    </visual>
  </link>

  <joint name="$(arg frame_ns)_base_link_to_laser_link" type="fixed">
    <parent link="$(arg frame_ns)_base_link"/>
    <child link="$(arg frame_ns)_laser_link"/>
    <origin rpy="0 0 0" xyz="0.2062 0.0 0.28"/>     # Set Manually z=0.28
  </joint>




</robot>
